## COMPLETE FIRST ITERATION OF THE APPLICATION
## This file contains complete code to run the website and complete data analysis

import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
from streamlit_option_menu import option_menu
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score
from sklearn.model_selection import train_test_split
from joblib import dump
import csv

################## OPTION MENU ################################
with st.sidebar:
    selected = option_menu(
        menu_title = "Main Menu",
        options = ["Home", "Job Analysis", "University Analysis", "Contact"],
        icons = ["house", "briefcase", "mortarboard", "envelope"],
        menu_icon = "circle",
        default_index = 0,
        styles = {"container":{"background-color": "#fafafa"}, "icon":{"color": "black", "font-size": "25px"}
        }
    )

################## HOME PAGE ###################################
if selected == "Home":
    st.image('logga.innovia.jpeg', width=500)
    st.markdown(' ## Welcome, *University of Gothenburg*')
    st.markdown(" #### This application was created to help you navigate the demand of IT-security in todays labor market.")
    st.markdown(' ')
    st.markdown(' ##### To use the application, go to Job Analysis or University Analysis.')

################# JOB ANALYSIS PAGE ############################
elif selected == "Job Analysis":
    st.title(f"{selected}")
    ##### INFORMATION
    st.markdown(' ##### This analysis tool creates a visualization showing an overview of jobs requiring skills in IT-security over the years in the top 10 biggest Swedish cities.')
    st.markdown(' ##### To start the analysis, please select at least one year and one city.')
    st.markdown(' ')
    ##### YEAR SELECTION 
    st.markdown(' ### Which year(s) would you like to select for analysis?')
    year_options = ['All', 2016, 2017, 2018, 2019, 2020, 2021, 2022, 2023]
    selected_years = st.multiselect('Select Year(s)', options=year_options)
    ##### CITY SELECTION
    st.markdown(' ### Which city(ies) would you like to select for analysis?')
    city_options = ['All', 'Göteborg', 'Stockholm', 'Malmö', 'Lund', 'Helsingborg', 'Uppsala', 'Linköping', 'Jönköping', 'Örebro', 'Norrköping']
    selected_cities = st.multiselect('Select City(ies)', options=city_options)
    ##### IF ALL IS SELECTED 
    if 'All' in selected_years:
        selected_years = [year for year in year_options if year != 'All']
    if 'All' in selected_cities:
        selected_cities = [city for city in city_options if city != 'All']
    ##### WARNING TO MAKE THE USER SELECT AT LEAST ONE 
    if not selected_years or not selected_cities:
        st.warning('Please select at least one year and one city.')
        st.stop()

    ##### ALGORITMEN
    df_train = pd.read_csv('training_dataset(2016-2023).csv') # TRAIN
    df_train['description'] = df_train['description'].fillna('')
    df_full = pd.read_csv('full_dataset(2016-2023).csv') # TEST
    df_full['description'] = df_full['description'].fillna('')
    ## FILTRERA DATA PÅ SELECTIONS 
    df_full = df_full[df_full['year'].isin(selected_years) & df_full['workplace_address'].isin(selected_cities)]
    if df_full.empty:
        st.warning('No data available for the selected year(s) and city(ies).')
        st.stop()
    ## SPLIT / TEST 
    X = df_train['description']
    y = df_train['it_security']
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    ## INITIALIZE VECTORIZER 
    tfidf_vectorizer = TfidfVectorizer(use_idf=True)
    ## FIT AND TRANSFORM
    X_train_tfidf = tfidf_vectorizer.fit_transform(X_train)
    ## TRANSFORM FULL DATASET 
    X_full = df_full['description']
    X_full_tfidf = tfidf_vectorizer.transform(X_full)
    ## LOGISTIC REGRESSION, MAX ITERATIONS 250
    model = LogisticRegression(max_iter=250)
    ## TRAIN MODEL WITH TRAINING DATA 
    model.fit(X_train_tfidf, y_train)
    ## MAKE PREDICTIONS 
    y_full_pred = model.predict(X_full_tfidf)
    ## SAVE PREDICTIONS 
    df_full['it_security_prediction'] = y_full_pred
    ## CALCULATE % OF IT-SECURITY JOBS
    it_security_jobs_by_year = df_full.groupby('year')['it_security_prediction'].mean() * 100
    
    ##### LINE CHART 
    fig = go.Figure()
    fig.add_trace(go.Scatter(x=it_security_jobs_by_year.index, y=it_security_jobs_by_year, mode='lines+markers', name='IT-security jobs'))
    fig.update_layout(title='Percentage of IT-security jobs per year', xaxis_title='Year', yaxis_title='Percentage (%)', yaxis=dict(range=[0, 30])) # Y-AXIS START AT 0, MAX 30
    st.plotly_chart(fig)
    ## TRANSFORM TEST DATA 
    X_test_tfidf = tfidf_vectorizer.transform(X_test)
    ## MAKE PREDICTIONS ON TRAIN DATA 
    y_train_pred = model.predict(X_train_tfidf)
    ## CALCULATE THE ACCURACY ON TRAINING
    train_accuracy = accuracy_score(y_train, y_train_pred)
    st.write(f'Training set accuracy: {train_accuracy}')
    ## MAKE PREDICTIONS ON TEST 
    y_test_pred = model.predict(X_test_tfidf)
    ## CALCULATE THE ACCURACY ON TEST 
    test_accuracy = accuracy_score(y_test, y_test_pred)
    st.write(f'Test set accuracy: {test_accuracy}')
    ## SAVE THE MODEL 
    dump(model, 'job_classification_model.joblib')
    ## SAVE FITTED TF-IDF VECTORIZER 
    dump(tfidf_vectorizer, 'tfidf_vectorizer.joblib')
    #### SAVE FULL DATASET WITH PREDICTIONS
    df_full.to_csv('full_dataset_with_predictions.csv', index=False)
    ## DISPLAY THE RESULTS IN A TABLE 
    st.write(it_security_jobs_by_year)


################# COMPETENCIES UNIVERSITY ###############
elif selected == "University Analysis":
    st.title(f"{selected}")
    ### DATA VISUALIZATION 
    df = pd.read_csv('KOMPISS - Blad1.csv') # Läs in kompetenser
    st.markdown(' ##### Universities offering Systemvetenskap in Sweden differ a lot from one another.')
    st.markdown(' ##### This tool will help create an overview of what competencies are taught at the different universities.')
    competencies = df.columns[1:] # Hämta alla kolumner med kompetenserna
    contact_selected = st.selectbox("Select Competence", competencies) # Välj kompetens
    filtered_df = df[df[contact_selected]] # Filtera resterande data på vald kompetens
    universities = filtered_df['Universitet']
    values = [1] * len(universities)
    universities_list = filtered_df['Universitet'].tolist() # Skapa lista på universiteten 
    st.write(f"**Universities offering {contact_selected}:**") # Skriv ut lista på universitet
    for university in universities_list:
        st.write(university)


################# CONTACT PAGE ######################
elif selected == "Contact":
    st.title(f"{selected} us")
    st.markdown(' #### If you have any questions about this application, please let us know.')
    st.markdown(' ##### Amanda Borg: amandaborgg@gmail.com')
    st.markdown(' ##### August Bergstrand: bergstrandaugust@gmail.com')
    st.markdown(' ##### Lina Book: linabook1@gmail.com')
    st.markdown(' ##### Lovisa Fredriksson: lovisa.f.fredriksson@gmail.com')
    st.markdown(' ##### Rebecka Ahlenius: rebecka.ahlenius@hotmail.com')
